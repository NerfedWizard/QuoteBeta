{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loeln\\\\OneDrive\\\\Desktop\\\\QuoteBeta\\\\quote-react\\\\testing-react-app\\\\src\\\\Component\\\\CategorySelect.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Stack, Box, Button, Paper, styled, Autocomplete, TextField } from '@mui/material';\nimport axios from 'axios';\nimport NavButtons from './NavButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Item = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    backgroundColor: 'oldlace',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    fontFamily: 'Bitter',\n    textAlign: 'left',\n    fontWeight: 'bold',\n    color: 'darkslategrey',\n    maxWidth: 800,\n    minWidth: 200\n  };\n});\n_c = Item;\nconst ColorButton = styled(Button)(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    color: 'black',\n    font: 'bold',\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    fontFamily: 'Bitter',\n    backgroundColor: \"seagreen\",\n    '&:hover': {\n      backgroundColor: \"darkgreen\"\n    }\n  };\n});\n_c2 = ColorButton;\nconst CustomAutoComplete = styled(Autocomplete)(_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return {\n    color: \"cyan\",\n    backgroundColor: \"azure\",\n    maxWidth: 575,\n    minWidth: 300,\n    fontWeight: 'bold',\n    fontFamily: 'Caveat',\n    '&:hover': {\n      backgroundColor: \"lightgreen\"\n    }\n  };\n});\n_c3 = CustomAutoComplete;\n\nfunction RandomNum(length) {\n  const min = 0;\n  const max = length;\n  const rand = Math.floor(Math.random() * (max - min)) + min;\n  return rand;\n}\n\n_c4 = RandomNum;\nexport default function SelectVariants() {\n  _s();\n\n  const [choice, setChoice] = React.useState('');\n  const [quote, setQuote] = React.useState([]);\n  const [author, setAuthor] = React.useState([]); // eslint-disable-next-line\n\n  const handleChange = event => {\n    setChoice(event.target.value);\n    GetQuoteByCategory(event.target.value);\n  };\n\n  const handleClick = event => {\n    GetQuoteByCategory(choice);\n  };\n\n  const changeGreeting = () => {\n    if (choice !== '') {\n      return author;\n    }\n\n    return \"Choose a Category\";\n  };\n\n  async function GetQuoteByCategory(event) {\n    let category = await axios.get(`/api/quote/category/${event}`); // eslint-disable-next-line\n\n    const quoteList = new Array(); // eslint-disable-next-line\n\n    const authorList = new Array();\n\n    for (let i = 0; i < category.data.length; i++) {\n      quoteList.push(category.data[i].quoted);\n      authorList.push(category.data[i].quoteAuthor);\n    }\n\n    const num = RandomNum(category.data.length);\n    setAuthor(authorList[num]);\n    setQuote(\"\\\"\" + quoteList[num] + \"\\\"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        boxShadow: 5,\n        borderRadius: 2,\n        p: 2,\n        m: 'auto',\n        maxWidth: 800,\n        minWidth: 200,\n        justifyContent: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        direction: \"row\",\n        justifyContent: \"flex-start\",\n        children: [/*#__PURE__*/_jsxDEV(CustomAutoComplete, {\n          value: choice,\n          onChange: (event, newChoice) => {\n            setChoice(newChoice);\n            GetQuoteByCategory(newChoice);\n          },\n          isOptionEqualToValue: (option, value) => option.value === value.value,\n          selectOnFocus: true,\n          options: qCategory.sort(),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Category\",\n            variant: \"standard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ColorButton, {\n          onClick: handleClick,\n          sx: {\n            p: 0\n          },\n          children: \" Next Quote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Item, {\n        children: [/*#__PURE__*/_jsxDEV(Item, {\n          variant: \"contained\",\n          sx: {\n            fontSize: 20\n          },\n          children: changeGreeting()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          variant: \"contained\",\n          sx: {\n            fontFamily: 'Caveat',\n            color: 'darkslategrey',\n            fontSize: 40,\n            p: 0\n          },\n          children: quote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        spacing: 5,\n        children: NavButtons('category')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(SelectVariants, \"25aDU4lijeMV7EqIlOToRxo/NNY=\");\n\n_c5 = SelectVariants;\nconst qCategory = ['life', 'love', 'inspiration', 'humor', 'wildcard', 'soul', 'truth', 'poetry', 'wisdom', 'friendship', 'happiness', 'books', 'romance', 'writing', 'success', 'hope', 'arts', 'education', 'motivation', 'death', 'faith', 'philosophy', 'mind', 'god', 'funny', 'relationship', 'religion', 'science', 'knowledge', 'quotes', 'purpose', 'positive', 'dad'];\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Item\");\n$RefreshReg$(_c2, \"ColorButton\");\n$RefreshReg$(_c3, \"CustomAutoComplete\");\n$RefreshReg$(_c4, \"RandomNum\");\n$RefreshReg$(_c5, \"SelectVariants\");","map":{"version":3,"sources":["C:/Users/loeln/OneDrive/Desktop/QuoteBeta/quote-react/testing-react-app/src/Component/CategorySelect.js"],"names":["React","Stack","Box","Button","Paper","styled","Autocomplete","TextField","axios","NavButtons","Item","theme","backgroundColor","typography","body2","padding","spacing","fontFamily","textAlign","fontWeight","color","maxWidth","minWidth","ColorButton","font","fontSize","CustomAutoComplete","RandomNum","length","min","max","rand","Math","floor","random","SelectVariants","choice","setChoice","useState","quote","setQuote","author","setAuthor","handleChange","event","target","value","GetQuoteByCategory","handleClick","changeGreeting","category","get","quoteList","Array","authorList","i","data","push","quoted","quoteAuthor","num","boxShadow","borderRadius","p","m","justifyContent","newChoice","option","qCategory","sort","params"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Stack, Box, Button, Paper, styled, Autocomplete, TextField } from '@mui/material';\r\nimport axios from 'axios';\r\n\r\nimport NavButtons from './NavButtons';\r\n\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n    backgroundColor: 'oldlace',\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(1),\r\n    fontFamily: 'Bitter',\r\n    textAlign: 'left',\r\n    fontWeight: 'bold',\r\n    color: 'darkslategrey',\r\n    maxWidth: 800,\r\n    minWidth: 200,\r\n}));\r\nconst ColorButton = styled(Button)(({ theme }) => ({\r\n    color: 'black',\r\n    font: 'bold',\r\n    fontSize: '1.5rem',\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Bitter',\r\n    backgroundColor: \"seagreen\",\r\n    '&:hover': {\r\n        backgroundColor: \"darkgreen\",\r\n    },\r\n}));\r\n\r\nconst CustomAutoComplete = styled(Autocomplete)(({ theme }) => ({\r\n    color: \"cyan\",\r\n    backgroundColor: \"azure\",\r\n    maxWidth: 575,\r\n    minWidth: 300,\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Caveat',\r\n    '&:hover': {\r\n        backgroundColor: \"lightgreen\",\r\n    },\r\n}));\r\nfunction RandomNum(length) {\r\n    const min = 0;\r\n    const max = length;\r\n    const rand = Math.floor(Math.random() * (max - min)) + min;\r\n    return (rand);\r\n}\r\nexport default function SelectVariants() {\r\n    const [choice, setChoice] = React.useState('');\r\n    const [quote, setQuote] = React.useState([]);\r\n    const [author, setAuthor] = React.useState([]);\r\n    // eslint-disable-next-line\r\n    const handleChange = (event) => {\r\n        setChoice(event.target.value);\r\n        GetQuoteByCategory(event.target.value);\r\n    };\r\n    const handleClick = (event) => {\r\n        GetQuoteByCategory(choice);\r\n    };\r\n    const changeGreeting = () => {\r\n        if (choice !== '') {\r\n            return author;\r\n        }\r\n        return \"Choose a Category\";\r\n    }\r\n    async function GetQuoteByCategory(event) {\r\n        let category = await axios.get(`/api/quote/category/${event}`);\r\n        // eslint-disable-next-line\r\n        const quoteList = new Array();\r\n        // eslint-disable-next-line\r\n        const authorList = new Array();\r\n        for (let i = 0; i < category.data.length; i++) {\r\n            quoteList.push(category.data[i].quoted);\r\n            authorList.push(category.data[i].quoteAuthor);\r\n        }\r\n        const num = RandomNum(category.data.length);\r\n        setAuthor(authorList[num]);\r\n        setQuote(\"\\\"\" + quoteList[num] + \"\\\"\");\r\n\r\n    }\r\n    return (\r\n\r\n        <>\r\n            <Box sx={{\r\n                boxShadow: 5,\r\n                borderRadius: 2,\r\n                p: 2,\r\n                m: 'auto',\r\n                maxWidth: 800,\r\n                minWidth: 200,\r\n                justifyContent: 'center',\r\n            }}>\r\n                <Stack spacing={2} direction=\"row\" justifyContent=\"flex-start\" >\r\n                    <CustomAutoComplete\r\n                        value={choice}\r\n                        onChange={(event, newChoice) => {\r\n                            setChoice(newChoice);\r\n                            GetQuoteByCategory(newChoice);\r\n                        }}\r\n                        isOptionEqualToValue={(option, value) => option.value === value.value}\r\n                        selectOnFocus\r\n                        options={qCategory.sort()}\r\n                        renderInput={(params) => <TextField {...params} label=\"Category\" variant=\"standard\" />} />\r\n                    <ColorButton onClick={handleClick} sx={{ p: 0 }}> Next Quote</ColorButton>\r\n                </Stack>\r\n                <br />\r\n                <Item>\r\n                    <Item variant='contained' sx={{ fontSize: 20 }}>{changeGreeting()}</Item>\r\n                    <Item variant='contained' sx={{ fontFamily: 'Caveat', color: 'darkslategrey', fontSize: 40, p: 0 }}>{quote}</Item>\r\n                </Item>\r\n                <Stack direction=\"row\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                    spacing={5}>\r\n                    {NavButtons('category')}\r\n                </Stack>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\nconst qCategory = [\r\n    'life',\r\n    'love',\r\n    'inspiration',\r\n    'humor',\r\n    'wildcard',\r\n    'soul',\r\n    'truth',\r\n    'poetry',\r\n    'wisdom',\r\n    'friendship',\r\n    'happiness',\r\n    'books',\r\n    'romance',\r\n    'writing',\r\n    'success',\r\n    'hope',\r\n    'arts',\r\n    'education',\r\n    'motivation',\r\n    'death',\r\n    'faith',\r\n    'philosophy',\r\n    'mind',\r\n    'god',\r\n    'funny',\r\n    'relationship',\r\n    'religion',\r\n    'science',\r\n    'knowledge',\r\n    'quotes',\r\n    'purpose',\r\n    'positive',\r\n    'dad',\r\n];"]},"metadata":{},"sourceType":"module"}