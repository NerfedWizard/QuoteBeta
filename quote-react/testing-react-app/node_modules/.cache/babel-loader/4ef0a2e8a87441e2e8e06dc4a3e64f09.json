{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loeln\\\\OneDrive\\\\Desktop\\\\QuoteBeta\\\\quote-react\\\\testing-react-app\\\\src\\\\Component\\\\QuoteManagement\\\\CategorySelect.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Stack, styled, Autocomplete, TextField } from '@mui/material';\nimport { ColorButton, QuoteItem, MyBox } from './../../Style/styles';\nimport UserService from './../../services/user.service';\nimport { Outlet } from 'react-router-dom';\nimport RandomNumber from './../../Actions/RandomNumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomAutoComplete = styled(Autocomplete)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    color: \"cyan\",\n    backgroundColor: \"azure\",\n    maxWidth: 575,\n    minWidth: 300,\n    fontWeight: 'bold',\n    fontFamily: 'Caveat',\n    '&:hover': {\n      backgroundColor: \"lightgreen\"\n    }\n  };\n});\n_c = CustomAutoComplete;\nexport default function SelectVariants() {\n  _s();\n\n  const [choice, setChoice] = useState('');\n  const [history] = useState([{}]);\n  const [count, setCount] = useState(history.length);\n  const [quotes, setQuotes] = useState({\n    quote: '',\n    author: 'Choose a Category'\n  });\n\n  const handleClick = event => {\n    GetQuoteByCategory(choice);\n  };\n\n  async function GetQuoteByCategory(event) {\n    let category = await UserService.getQuoteByCategory(event);\n    const num = RandomNumber.getRandomNumSet(category.data.length);\n    setQuotes({ ...quotes,\n      quote: category.data[num].quoted,\n      author: category.data[num].quoteAuthor\n    });\n    history.push({ ...quotes,\n      quote: category.data[num].quoted,\n      author: category.data[num].quoteAuthor\n    });\n    setCount(history.length - 2);\n  }\n\n  const prevIndex = async () => {\n    if (count > 0) {\n      setCount(count - 1);\n    }\n  };\n\n  const prevQuote = async () => {\n    if (history.length > 1) {\n      setQuotes(history[count]);\n      prevIndex();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MyBox, {\n      sx: {\n        boxShadow: 5,\n        borderRadius: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        direction: \"row\",\n        justifyContent: \"flex-start\",\n        children: [/*#__PURE__*/_jsxDEV(CustomAutoComplete, {\n          value: choice,\n          onChange: (event, newChoice) => {\n            setChoice(newChoice);\n            GetQuoteByCategory(newChoice);\n          },\n          isOptionEqualToValue: (option, value) => option.value === value.value,\n          selectOnFocus: true,\n          options: qCategory.sort(),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Category\",\n            variant: \"standard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 50\n          }, this),\n          sx: {\n            borderRadius: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ColorButton, {\n          onClick: handleClick,\n          sx: {\n            p: 0\n          },\n          children: \" Next Quote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ColorButton, {\n          onClick: prevQuote,\n          children: \"Previous Quote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuoteItem, {\n        variant: \"contained\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"author-span\",\n          style: {\n            color: 'slateBlue'\n          },\n          children: quotes.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), quotes.quote]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        justifyContent: \"space-evenly\",\n        alignItems: \"center\",\n        spacing: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SelectVariants, \"k2yRNMsCg1cAl5HB3EHRh2RQ4mE=\");\n\n_c2 = SelectVariants;\nconst qCategory = ['life', 'love', 'inspiration', 'humor', 'wildcard', 'soul', 'truth', 'poetry', 'wisdom', 'friendship', 'happiness', 'books', 'romance', 'writing', 'success', 'hope', 'arts', 'education', 'motivation', 'death', 'faith', 'philosophy', 'mind', 'god', 'funny', 'relationship', 'religion', 'science', 'knowledge', 'quotes', 'purpose', 'positive', 'dad'];\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomAutoComplete\");\n$RefreshReg$(_c2, \"SelectVariants\");","map":{"version":3,"sources":["C:/Users/loeln/OneDrive/Desktop/QuoteBeta/quote-react/testing-react-app/src/Component/QuoteManagement/CategorySelect.js"],"names":["useState","Stack","styled","Autocomplete","TextField","ColorButton","QuoteItem","MyBox","UserService","Outlet","RandomNumber","CustomAutoComplete","theme","color","backgroundColor","maxWidth","minWidth","fontWeight","fontFamily","SelectVariants","choice","setChoice","history","count","setCount","length","quotes","setQuotes","quote","author","handleClick","event","GetQuoteByCategory","category","getQuoteByCategory","num","getRandomNumSet","data","quoted","quoteAuthor","push","prevIndex","prevQuote","boxShadow","borderRadius","newChoice","option","value","qCategory","sort","params","p"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,YAAxB,EAAsCC,SAAtC,QAAuD,eAAvD;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,KAAjC,QAA8C,sBAA9C;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;;AAGA,MAAMC,kBAAkB,GAAGT,MAAM,CAACC,YAAD,CAAN,CAAqB;AAAA,MAAC;AAAES,IAAAA;AAAF,GAAD;AAAA,SAAgB;AAC5DC,IAAAA,KAAK,EAAE,MADqD;AAE5DC,IAAAA,eAAe,EAAE,OAF2C;AAG5DC,IAAAA,QAAQ,EAAE,GAHkD;AAI5DC,IAAAA,QAAQ,EAAE,GAJkD;AAK5DC,IAAAA,UAAU,EAAE,MALgD;AAM5DC,IAAAA,UAAU,EAAE,QANgD;AAO5D,eAAW;AACPJ,MAAAA,eAAe,EAAE;AADV;AAPiD,GAAhB;AAAA,CAArB,CAA3B;KAAMH,kB;AAYN,eAAe,SAASQ,cAAT,GAA0B;AAAA;;AACrC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACsB,OAAD,IAAYtB,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA1B;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAACsB,OAAO,CAACG,MAAT,CAAlC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB3B,QAAQ,CAAC;AAAE4B,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAD,CAApC;;AAEA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3BC,IAAAA,kBAAkB,CAACZ,MAAD,CAAlB;AACH,GAFD;;AAGA,iBAAeY,kBAAf,CAAkCD,KAAlC,EAAyC;AACrC,QAAIE,QAAQ,GAAG,MAAMzB,WAAW,CAAC0B,kBAAZ,CAA+BH,KAA/B,CAArB;AACA,UAAMI,GAAG,GAAGzB,YAAY,CAAC0B,eAAb,CAA6BH,QAAQ,CAACI,IAAT,CAAcZ,MAA3C,CAAZ;AACAE,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AACKE,MAAAA,KAAK,EAAEK,QAAQ,CAACI,IAAT,CAAcF,GAAd,EAAmBG,MAD/B;AACuCT,MAAAA,MAAM,EAAEI,QAAQ,CAACI,IAAT,CAAcF,GAAd,EAAmBI;AADlE,KAAD,CAAT;AAGAjB,IAAAA,OAAO,CAACkB,IAAR,CAAa,EACT,GAAGd,MADM;AACEE,MAAAA,KAAK,EAAEK,QAAQ,CAACI,IAAT,CAAcF,GAAd,EAAmBG,MAD5B;AACoCT,MAAAA,MAAM,EAAEI,QAAQ,CAACI,IAAT,CAAcF,GAAd,EAAmBI;AAD/D,KAAb;AAGAf,IAAAA,QAAQ,CAACF,OAAO,CAACG,MAAR,GAAiB,CAAlB,CAAR;AACH;;AACD,QAAMgB,SAAS,GAAG,YAAY;AAC1B,QAAIlB,KAAK,GAAG,CAAZ,EAAe;AACXC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;AACJ,GAJD;;AAKA,QAAMmB,SAAS,GAAG,YAAY;AAC1B,QAAIpB,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;AACpBE,MAAAA,SAAS,CAACL,OAAO,CAACC,KAAD,CAAR,CAAT;AACAkB,MAAAA,SAAS;AACZ;AACJ,GALD;;AAMA,sBACI;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,EAAE,EAAE;AACPE,QAAAA,SAAS,EAAE,CADJ;AAEPC,QAAAA,YAAY,EAAE;AAFP,OAAX;AAAA,8BAII,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAmB,QAAA,SAAS,EAAC,KAA7B;AAAmC,QAAA,cAAc,EAAC,YAAlD;AAAA,gCACI,QAAC,kBAAD;AACI,UAAA,KAAK,EAAExB,MADX;AAEI,UAAA,QAAQ,EAAE,CAACW,KAAD,EAAQc,SAAR,KAAsB;AAC5BxB,YAAAA,SAAS,CAACwB,SAAD,CAAT;AACAb,YAAAA,kBAAkB,CAACa,SAAD,CAAlB;AACH,WALL;AAMI,UAAA,oBAAoB,EAAE,CAACC,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACC,KAAP,KAAiBA,KAAK,CAACA,KANpE;AAOI,UAAA,aAAa,MAPjB;AAQI,UAAA,OAAO,EAAEC,SAAS,CAACC,IAAV,EARb;AASI,UAAA,WAAW,EAAGC,MAAD,iBAAY,QAAC,SAAD,OAAeA,MAAf;AAAuB,YAAA,KAAK,EAAC,UAA7B;AAAwC,YAAA,OAAO,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,kBAT7B;AAUI,UAAA,EAAE,EAAE;AAAEN,YAAAA,YAAY,EAAE;AAAhB;AAVR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAaI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAEd,WAAtB;AAAmC,UAAA,EAAE,EAAE;AAAEqB,YAAAA,CAAC,EAAE;AAAL,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbJ,eAcI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAET,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAoBI;AAAA;AAAA;AAAA;AAAA,cApBJ,eAsBI,QAAC,SAAD;AAAW,QAAA,OAAO,EAAC,WAAnB;AAAA,gCACI;AAAM,UAAA,KAAK,EAAC,aAAZ;AAA0B,UAAA,KAAK,EAAE;AAAE7B,YAAAA,KAAK,EAAE;AAAT,WAAjC;AAAA,oBAA0Da,MAAM,CAACG;AAAjE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGKH,MAAM,CAACE,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ,eA4BI,QAAC,KAAD;AAAO,QAAA,SAAS,EAAC,KAAjB;AACI,QAAA,cAAc,EAAC,cADnB;AAEI,QAAA,UAAU,EAAC,QAFf;AAGI,QAAA,OAAO,EAAE;AAHb;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAoCI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YApCJ;AAAA,kBADJ;AAwCH;;GAvEuBT,c;;MAAAA,c;AAwExB,MAAM6B,SAAS,GAAG,CACd,MADc,EAEd,MAFc,EAGd,aAHc,EAId,OAJc,EAKd,UALc,EAMd,MANc,EAOd,OAPc,EAQd,QARc,EASd,QATc,EAUd,YAVc,EAWd,WAXc,EAYd,OAZc,EAad,SAbc,EAcd,SAdc,EAed,SAfc,EAgBd,MAhBc,EAiBd,MAjBc,EAkBd,WAlBc,EAmBd,YAnBc,EAoBd,OApBc,EAqBd,OArBc,EAsBd,YAtBc,EAuBd,MAvBc,EAwBd,KAxBc,EAyBd,OAzBc,EA0Bd,cA1Bc,EA2Bd,UA3Bc,EA4Bd,SA5Bc,EA6Bd,WA7Bc,EA8Bd,QA9Bc,EA+Bd,SA/Bc,EAgCd,UAhCc,EAiCd,KAjCc,CAAlB","sourcesContent":["import { useState } from 'react';\r\nimport { Stack, styled, Autocomplete, TextField } from '@mui/material';\r\nimport { ColorButton, QuoteItem, MyBox } from './../../Style/styles';\r\nimport UserService from './../../services/user.service';\r\nimport { Outlet } from 'react-router-dom';\r\nimport RandomNumber from './../../Actions/RandomNumber';\r\n\r\n\r\nconst CustomAutoComplete = styled(Autocomplete)(({ theme }) => ({\r\n    color: \"cyan\",\r\n    backgroundColor: \"azure\",\r\n    maxWidth: 575,\r\n    minWidth: 300,\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Caveat',\r\n    '&:hover': {\r\n        backgroundColor: \"lightgreen\",\r\n    },\r\n}));\r\n\r\nexport default function SelectVariants() {\r\n    const [choice, setChoice] = useState('');\r\n    const [history] = useState([{}]);\r\n    const [count, setCount] = useState(history.length);\r\n    const [quotes, setQuotes] = useState({ quote: '', author: 'Choose a Category' });\r\n   \r\n    const handleClick = (event) => {\r\n        GetQuoteByCategory(choice);\r\n    };\r\n    async function GetQuoteByCategory(event) {\r\n        let category = await UserService.getQuoteByCategory(event);\r\n        const num = RandomNumber.getRandomNumSet(category.data.length);\r\n        setQuotes({\r\n            ...quotes, quote: category.data[num].quoted, author: category.data[num].quoteAuthor\r\n        });\r\n        history.push({\r\n            ...quotes, quote: category.data[num].quoted, author: category.data[num].quoteAuthor\r\n        })\r\n        setCount(history.length - 2);\r\n    }\r\n    const prevIndex = async () => {\r\n        if (count > 0) {\r\n            setCount(count - 1);\r\n        }\r\n    }\r\n    const prevQuote = async () => {\r\n        if (history.length > 1) {\r\n            setQuotes(history[count]);\r\n            prevIndex();\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <MyBox sx={{\r\n                boxShadow: 5,\r\n                borderRadius: 10,\r\n            }}>\r\n                <Stack spacing={2} direction=\"row\" justifyContent=\"flex-start\" >\r\n                    <CustomAutoComplete\r\n                        value={choice}\r\n                        onChange={(event, newChoice) => {\r\n                            setChoice(newChoice);\r\n                            GetQuoteByCategory(newChoice);\r\n                        }}\r\n                        isOptionEqualToValue={(option, value) => option.value === value.value}\r\n                        selectOnFocus\r\n                        options={qCategory.sort()}\r\n                        renderInput={(params) => <TextField {...params} label=\"Category\" variant=\"standard\" />}\r\n                        sx={{ borderRadius: 2 }}\r\n                    />\r\n                    <ColorButton onClick={handleClick} sx={{ p: 0 }}> Next Quote</ColorButton>\r\n                    <ColorButton onClick={prevQuote}>Previous Quote</ColorButton>\r\n                </Stack>\r\n                <br />\r\n                \r\n                <QuoteItem variant='contained'>\r\n                    <span class='author-span' style={{ color: 'slateBlue' }}>{quotes.author}</span>\r\n                    <br />\r\n                    {quotes.quote}\r\n                </QuoteItem>\r\n                \r\n                <Stack direction=\"row\"\r\n                    justifyContent=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                    spacing={5}>\r\n                    \r\n                </Stack>\r\n            </MyBox>\r\n            <Outlet />\r\n        </>\r\n    );\r\n}\r\nconst qCategory = [\r\n    'life',\r\n    'love',\r\n    'inspiration',\r\n    'humor',\r\n    'wildcard',\r\n    'soul',\r\n    'truth',\r\n    'poetry',\r\n    'wisdom',\r\n    'friendship',\r\n    'happiness',\r\n    'books',\r\n    'romance',\r\n    'writing',\r\n    'success',\r\n    'hope',\r\n    'arts',\r\n    'education',\r\n    'motivation',\r\n    'death',\r\n    'faith',\r\n    'philosophy',\r\n    'mind',\r\n    'god',\r\n    'funny',\r\n    'relationship',\r\n    'religion',\r\n    'science',\r\n    'knowledge',\r\n    'quotes',\r\n    'purpose',\r\n    'positive',\r\n    'dad',\r\n];"]},"metadata":{},"sourceType":"module"}